#Collections in Java
    The Collection in Java is a framework that provides an architecture to store and manipulate the group of
objects. Java Collections can achieve all the operations that you perform on a data such as searching,
sorting, insertion, manipulation, and deletion. Java Collection means a single unit of objects.
Java Collection framework provides many interfaces (Set, List, Queue, Deque) and classes
(ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet).

#What is Collection in Java?
    A Collection represents a single unit of objects, i.e., a group.

#What is a framework in Java?
     It provides ready-made architecture.
     It represents a set of classes and interfaces.
     It is optional.

#What is Collection framework?
    The Collection framework represents a unified architecture for storing
and manipulating a group of objects. It has:
     1. Interfaces and its implementations, i.e., classes
     2. Algorithms

#Hierarchy of Collection Framework:

.i = Interface                      Iterable.i
.c = C                                  ^
                                        |
                                    Collection.i
                                        ^
                                        |
-------------------------------------------------------------------------------------
   ^                                    ^                                           ^
   |                                    |                                           |
List.i                              Queue.i                                        Set.i
 |                                   |   |                                          |   |
 |                                   |  PriorityQueue.c                             |   |--HashSet.c
 |                                   |                                              |   |
 |--ArrayList.c                    Deque.i                                          |   |--LinkedHashSet.c
 |                                   ^                                              |   |
 |                                   |                                              |
 |--LinkedList.c---------------------|                                              |
 |                                   |                                              |
 |                                  ArrayDeque.c                               SortedSet.i
 |--Vector.c                                                                        |
      ^                                                                         TreeSet.c
      |
      |
    Stack.c

List Interface:
    1. ArrayList class is most likely Arrays, but variable size DataStructure.
    2. LinkedList class collects or adds different type of object
    3. Vector class is most likely the ArrayList class, but it's offers Thread Safety
        3a. Stack class are commonly used with FIFO or LIFO methods

Queue Interface: used with FIFO methods
A Queue is a collection for holding elements prior to processing.Besides basic Collection operations,
queues provide additional insertion, removal, and inspection operations.
    1. PriorityQueue class
    2. LinkedList class
    3. Deque Interface
        3a. ArrayDeque class

public interface Queue<E> extends Collection<E> {
    E element();
    boolean offer(E e);
    E peek();
    E poll();
    E remove();
}

Queue Interface Structure
Type of Operation 	Throws exception 	Returns special value
Insert              	add(e) 	            offer(e)
Remove 	                remove()        	poll()
Examine             	element()       	peek()




#Methods of Collection interface:
    There are many methods declared in the Collection interface. They are as follows:

Method	             Description
add(Object)     	 This method is used to add an object to the collection.
addAll(Collection c) This method adds all the elements in the given collection to this collection.
clear()	             This method removes all of the elements from this collection.
contains(Object o) 	 This method returns true if the collection contains the specified element.
containsAll(Collection c)  This method returns true if the collection contains
                              all of the elements in the given collection.
equals(Object o)	 This method compares the specified object with this collection for equality.
hashCode()	         This method is used to return the hash code value for this collection.
isEmpty()	         This method returns true if this collection contains no elements.
iterator()	         This method returns an iterator over the elements in this collection.
max()              	 This method is used to return the maximum value present in the collection.
parallelStream()	 This method returns a parallel Stream with this collection as its source.
remove(Object o)	 This method is used to remove the given object from the collection.
    If there are duplicate values, then this method removes the first occurrence of the object.
removeAll(Collection c)	 This method is used to remove all the objects mentioned
                            in the given collection from the collection.
removeIf(Predicate filter)	This method is used to remove all the elements of this collection
                                that satisfy the given predicate.
retainAll(Collection c)	 This method is used to retain only the elements in this collection
                            that are contained in the specified collection.
size()	             This method is used to return the number of elements in the collection.
spliterator()	     This method is used to create a Spliterator over the elements in this collection.
stream()	         This method is used to return a sequential Stream with this collection as its source.
toArray()	        This method is used to return an array containing all of the elements in this collection.


// OR,


No.	Method                               Description
1	public boolean
    add(E e)                             It is used to insert an element in this collection.
2	public boolean
    addAll(Collection<? extends E> c)	 It is used to insert the specified collection elements
                                            in the invoking collection.
3	public boolean
    remove(Object element)               It is used to delete an element from the collection.
4	public boolean
    removeAll(Collection<?> c)	         It is used to delete all the elements of the specified
                                            collection from the invoking collection.
5	default boolean
    removeIf(Predicate<?super E> filter) It is used to delete all the elements of the collection
                                            that satisfy the specified predicate.
6	public boolean
    retainAll(Collection<?> c)	         It is used to delete all the elements of invoking
                                            collection except the specified collection.
7	public int size()	                 It returns the total number of elements in the collection.
8	public void clear()	                 It removes the total number of elements from the collection.
9	public boolean
    contains(Object element)	         It is used to search an element.
10	public boolean
    containsAll(Collection<?> c)	     It is used to search the specified collection in the collection.
11	public Iterator iterator()	         It returns an iterator.
12	public Object[] toArray()	         It converts collection into array.
13	public <T> T[] toArray(T[] a)        It converts collection into array. Here, the runtime type of
                                            the returned array is that of the specified array.
14	public boolean isEmpty()	         It checks if collection is empty.
15	default Stream<E> parallelStream()	 It returns a possibly parallel Stream with the
                                            collection as its source.
16	default Stream<E> stream()       	 It returns a sequential Stream with the collection as its source.
17	default Spliterator<E> spliterator() It generates a Spliterator over the specified
                                            elements in the collection.
18	public boolean
    equals(Object element)               It matches two collections.
19	public int hashCode()            	 It returns the hash code number of the collection.


#Iterator interface:
    Iterator interface provides the facility of iterating the elements in a forward direction only.

#Methods of Iterator interface
    There are only three methods in the Iterator interface. They are:

No.	Method	Description
1	public boolean hasNext() It returns true if the iterator has more elements otherwise it returns false.
2	public Object next()	 It returns the element and moves the cursor pointer to the next element.
3	public void remove()	 It removes the last elements returned by the iterator. It is less used.